stop("n must be a natural number.")
}
if (n == 0) {
return(x)
}
result <- 0
for (i in 0:n) {
result <- result + ((-1)^i * x^(2*i+1)) / factorial(2*i+1)
}
return(result)
}
result <- imitono(11,0.5)
result
result1 <- imitono(11, 0.5)
result
imitono <- function(n, x) {
# check if n is a natural number
if(!is.numeric(n) || !is.integer(n) || n <= 0) {
stop("n must be a positive integer")
}
# calculate the series expansion
sign <- c(1, rep(-1, n))
terms <- sign * (x^(2 * (0:n) + 1) / factorial(2 * (0:n) + 1))
# return the sum of the first n terms
return(sum(terms[1:n]))
}
result1 <- imitono(11, 0.5)
imitono <- function(n, x) {
# check if n is a natural number
if(!is.numeric(n) || n < 0 || n != round(n)) {
stop("n must be a positive integer")
}
# calculate the series expansion
sign <- c(1, rep(-1, n))
terms <- sign * (x^(2 * (0:n) + 1) / factorial(2 * (0:n) + 1))
# return the sum of the first n terms
return(sum(terms[1:n]))
}
result1 <- imitono(11, 0.5)
result
result1
sin(0.5)
result1
sin(0.5)
# create f_age and f_time variables
gifts$f_age <- cut(gifts$age, c(18,25,38,50,max(gifts$age)+1),right = FALSE,
labels = c("[18-25)", "[25-38)", "[38-50)", "[50 and over)"))
gifts$f_time <- cut(gifts$time, quantile(gifts$time, c(0, 0.25, 0.5, 0.75, 1)),
labels = c("[0,q1)", "[q1,q2)", "[q2,q3)", "[q3 and above)"))
# frequency correlation table of f_age and f_time
table(gifts$f_age, gifts$f_time)
# stacked bar chart of f_age and f_time
barplot(table(gifts$f_age, gifts$f_time), col=c("red","green","blue","yellow"), xlab="Age Group", ylab="Frequency", main="Frequency of Age Group and Time Spent on Advertising")
f_age <- cut(gifts$age, c(18, 25, 38, 50, Inf), right = FALSE,
labels = c("[18-25)", "[25-38)", "[38-50)", "[50 and over)"))
q <- quantile(gifts$time, probs = c(0, 0.25, 0.5, 0.75, 1))
f_time <- cut(gifts$time, q, include.lowest = TRUE,
labels = c("[0,q1)", "[q1,q2)", "[q2,q3)", "[q3 and above)"))
freq_table <- table(f_age, f_time)
freq_table
prop.table(freq_table)
barplot(freq_table, col = c("red","green","blue","yellow"),
xlab = "Age", ylab = "Frequency",
main = "Frequency Correlation Table of Age and Daily Time Spent on Advertising Promotions",
legend.text = TRUE, args.legend = list(title = "Daily Time Spent"))
table(gifts$f_age)
prop.table(table(gifts$f_age))
# Set x values
x <- seq(0, 2*pi, length.out = 100)
# Get y values for sin(x)
y_sin <- sin(x)
# Get y values for approximated sin(x) using imitono
y_imitono <- sapply(x, imitono)
# Plot both graphs
plot(x, y_sin, type = "l", col = "blue", xlab = "x", ylab = "y")
lines(x, y_imitono, col = "red")
legend("topright", c("sin(x)", "Approximated sin(x)"), col = c("blue", "red"), lty = 1)
imitono3 <- function(n, x) {
# check if n is a natural number
if(!is.numeric(n) || !is.integer(n) || n <= 0) {
stop("n must be a positive integer")
}
# compute series expansion using a recursive function
calc_sum <- function(i) {
if(i == 0) {
return(x)
} else {
term <- (-1)^(i) * x^(2*i+1) / factorial(2*i+1)
return(term + calc_sum(i-1))
}
}
# call calc_sum to compute the result
result <- calc_sum(n)
# return the result
return(result)
}
result3 <- imitono3(11, 0.5)
imitono3 <- function(n, x) {
# check if n is a natural number
if(!is.numeric(n) || n < 0 || n != round(n)) {
stop("n must be a positive integer")
}
# compute series expansion using a recursive function
calc_sum <- function(i) {
if(i == 0) {
return(x)
} else {
term <- (-1)^(i) * x^(2*i+1) / factorial(2*i+1)
return(term + calc_sum(i-1))
}
}
# call calc_sum to compute the result
result <- calc_sum(n)
# return the result
return(result)
}
result3 <- imitono3(11, 0.5)
result3
x <- seq(0, 2*pi, length.out=1000)
# Generate values for sin(x) and imitono(x, 10)
y_sin <- sin(x)
y_imitono <- imitono(10, x)
# Create a plot and add the two sets of points
plot(x, y_sin, type="l", col="red", xlab="x", ylab="y")
lines(x, y_imitono, col="blue")
y_imitono <- imitono(1000, x)
# Create a plot and add the two sets of points
plot(x, y_sin, type="l", col="red", xlab="x", ylab="y")
lines(x, y_imitono, col="blue")
x <- seq(0, 2*pi, length.out=1000)
# Generate values for sin(x) and imitono(x, 10)
y_sin <- sin(x)
y_imitono <- imitono(100, x)
# Create a plot and add the two sets of points
plot(x, y_sin, type="l", col="red", xlab="x", ylab="y")
lines(x, y_imitono, col="blue")
imitono <- function(n, x) {
# check if n is a natural number
if(!is.numeric(n) || n < 0 || n != round(n)) {
stop("n must be a positive integer")
}
# calculate the series expansion
sign <- c(1, rep(-1, n))
terms <- sign * (x^(2 * (0:n) + 1) / factorial(2 * (0:n) + 1))
# return the sum of the first n terms
return(sum(terms[1:n]))
}
result1 <- imitono(11, 0.5)
result1
sin(0.5)
imitono2 <- function(n, x) {
# check if n is a natural number
if(!is.numeric(n) || n < 0 || n != round(n)) {
stop("n must be a positive integer")
}
# compute series expansion using a recursive function
calc_sum <- function(i) {
if(i == 0) {
return(x)
} else {
term <- (-1)^(i) * x^(2*i+1) / factorial(2*i+1)
return(term + calc_sum(i-1))
}
}
# call calc_sum to compute the result
result <- calc_sum(n)
# return the result
return(result)
}
result2 <- imitono3(11, 0.5)
result2
x <- seq(0, 2*pi, length.out=1000)
# Generate values for sin(x) and imitono(x, 10)
y_sin <- sin(x)
y_imitono <- imitono(100, x)
# Create a plot and add the two sets of points
plot(x, y_sin, type="l", col="red", xlab="x", ylab="y")
lines(x, y_imitono, col="blue")
y_imitono <- imitono(1000, x)
# Create a plot and add the two sets of points
plot(x, y_sin, type="l", col="red", xlab="x", ylab="y")
lines(x, y_imitono, col="blue")
x <- seq(0, 2*pi, by = 0.01)
# Generate values for sin(x) and imitono(x, 10)
y1 <- sin(x)
y2 <- numeric(length(x))
for (i in 1:length(x)) {
y2[i] <- imitono(50, x[i])
}
# Create a plot and add the two sets of points
plot(x, y1, type = "l", col = "blue", xlab = "x", ylab = "y")
lines(x, y2, col = "red")
y2[i] <- imitono(500, x[i])
for (i in 1:length(x)) {
y2[i] <- imitono(500, x[i])
}
# Create a plot and add the two sets of points
plot(x, y1, type = "l", col = "blue", xlab = "x", ylab = "y")
lines(x, y2, col = "red")
for (i in 1:length(x)) {
y2[i] <- imitono(500000000, x[i])
}
# Define the x values
x <- seq(0, 2*pi, length.out = 100)
# Plot the graph of the sine using the sin() function
plot(x, sin(x), type = "l", col = "blue")
# Plot the graph of the sine using the imitono() function
n <- 10
y <- sapply(x, function(x) imitono(n, x))
lines(x, y, col = "red")
x <- seq(0, 2*pi, length.out = 1000)
y1 <- sin(x)
y2 <- imitono(10, x)
plot(x, y1, type = "l", col = "blue")
lines(x, y2, col = "red")
x <- seq(0, 2*pi, length.out = 1000)
y1 <- sin(x)
y2 <- imitono(10, x)
imitono <- function(n, x) {
# check if n is a natural number
if(!is.numeric(n) || n < 0 || n != round(n)) {
stop("n must be a positive integer")
}
# calculate the series expansion
sign <- c(1, rep(-1, n))
terms <- sign * (x^(2 * (0:n) + 1) / factorial(2 * (0:n) + 1))
# return the sum of the first n terms
return(sum(terms[1:n]))
}
y2 <- imitono(10, x)
plot(x, y1, type = "l", col = "blue")
lines(x, y2, col = "red")
x <- seq(0, 2*pi, length.out = 1000)
y1 <- sin(x)
y2 <- imitono(10, x)
plot(x, y1, type = "l", col = "blue")
lines(x, y2, col = "red")
imitono <- function(n, x) {
# check if n is a natural number
if(!is.numeric(n) || n < 0 || n != round(n)) {
stop("n must be a positive integer")
}
# calculate the series expansion
sign <- c(1, rep(-1, n))
terms <- sign * (x^(2 * (0:n) + 1) / factorial(2 * (0:n) + 1))
# return the sum of the first n terms
return(sum(terms[1:n]))
}
# Define x-values
x <- seq(0, 2*pi, length.out = 100)
# Calculate y-values for sine function
y_sin <- sin(x)
# Calculate y-values for imitono function
y_imitono <- imitono(10, x)
# Plot sine function in blue
plot(x, y_sin, type = "l", col = "blue")
# Add imitono function in red
lines(x, y_imitono, col = "red")
# Define x-values
x <- seq(0, 2*pi, length.out = 100)
# Calculate y-values for sin function
y_sin <- sin(x)
# Calculate y-values for Taylor series approximation
y_imitono <- imitono(10, x)
# Plot sin function in blue
plot(x, y_sin, type = "l", col = "blue")
# Add Taylor series approximation in red
lines(x, y_imitono, col = "red")
# Define the imitono2 function
imitono2 <- function(n, x) {
# check if n is a natural number
if(!is.numeric(n) || n < 0 || n != round(n)) {
stop("n must be a positive integer")
}
# compute series expansion using a recursive function
calc_sum <- function(i) {
if(i == 0) {
return(x)
} else {
term <- (-1)^(i) * x^(2*i+1) / factorial(2*i+1)
return(term + calc_sum(i-1))
}
}
# call calc_sum to compute the result
result <- calc_sum(n)
# return the result
return(result)
}
# Set the range of x values
x <- seq(0, 2*pi, length.out=1000)
# Plot the sine graph using the sin() function
plot(x, sin(x), type="l", col="blue", xlab="x", ylab="y")
# Add the imitono2 function curve to the plot
lines(x, imitono2(9, x), col="red")
# Add a legend to the plot
legend("topleft", legend=c("sin(x)", "imitono2(9, x)"), col=c("blue", "red"), lty=1)
# Set the range of x values
x <- seq(0, 2*pi, length.out=1000)
# Plot the sine graph using the sin() function
plot(x, sin(x), type="l", col="blue", xlab="x", ylab="y")
# Add the imitono2 function curve to the plot
lines(x, imitono2(9, x), col="red")
source("~/.active-rstudio-document", echo=TRUE)
# Plot the sine graph using the sin() function
plot(x, sin(x), type="l", col="blue", xlab="x", ylab="y")
# Add the imitono2 function curve to the plot
lines(x, imitono2(9, x), col="red")
# Add a legend to the plot
legend("topleft", legend=c("sin(x)", "imitono2(9, x)"), col=c("blue", "red"), lty=1)
# Add the imitono2 function curve to the plot
lines(x, imitono2(19, x), col="red")
# Add the imitono2 function curve to the plot
lines(x, imitono2(1900, x), col="red")
# Define x-values
# define the range of x values
x <- seq(0, 2*pi, length.out = 100)
imitono <- function(n, x) {
# check if n is a natural number
if(!is.numeric(n) || n < 0 || n != round(n)) {
stop("n must be a positive integer")
}
# calculate the series expansion
sign <- c(1, rep(-1, n))
terms <- sign * (x^(2 * (0:n) + 1) / factorial(2 * (0:n) + 1))
# return the sum of the first n terms
return(sum(terms[1:n]))
}
# Define x-values
# define the range of x values
x <- seq(0, 2*pi, length.out = 100)
y_imitono <- imitono(20, x)
# plot the graphs
plot(x, y_sin, type = "l", col = "blue")
lines(x, y_imitono, type = "l", col = "red")
legend("topright", legend = c("sin(x)", "imitono(20, x)"), col = c("blue", "red"), lty = 1)
imitono <- function(n, x) {
# check if n is a natural number
if(!is.numeric(n) || n < 0 || n != round(n)) {
stop("n must be a positive integer")
}
# calculate the series expansion
sign <- c(1, rep(-1, n))
terms <- sign * (x^(2 * (0:n) + 1) / factorial(2 * (0:n) + 1))
# return the sum of the first n terms
return(sum(terms[1:n]))
}
result1 <- imitono(11, 0.5)
result1
sin(0.5)
imitono2 <- function(n, x) {
# check if n is a natural number
if(!is.numeric(n) || n < 0 || n != round(n)) {
stop("n must be a positive integer")
}
# compute series expansion using a recursive function
calc_sum <- function(i) {
if(i == 0) {
return(x)
} else {
term <- (-1)^(i) * x^(2*i+1) / factorial(2*i+1)
return(term + calc_sum(i-1))
}
}
# call calc_sum to compute the result
result <- calc_sum(n)
# return the result
return(result)
}
result2 <- imitono3(11, 0.5)
result1
sin(0.5)
result2
result2 <- imitono3(11, 0.5)
result2
result2 <- imitono2(11, 0.5)
result2
imitono <- function(n, x) {
# check if n is a natural number
if(!is.numeric(n) || n < 0 || n != round(n)) {
stop("n must be a positive integer")
}
# calculate the series expansion
sign <- c(1, rep(-1, n))
terms <- sign * (x^(2 * (0:n) + 1) / factorial(2 * (0:n) + 1))
# return the sum of the first n terms
return(sum(terms[1:n]))
}
# Define x-values
# define the range of x values
x <- seq(0, 2*pi, length.out = 100)
# calculate the y values using sin() and imitono() functions
y_sin <- sin(x)
y_imitono <- imitono(20, x)
# plot the graphs
plot(x, y_sin, type = "l", col = "blue")
lines(x, y_imitono, type = "l", col = "red")
imitono <- function(n, x) {
# check if n is a natural number
if(!is.numeric(n) || n < 0 || n != round(n)) {
stop("n must be a positive integer")
}
# calculate the series expansion
sign <- c(1, rep(-1, n))
xx <- rep(x, each = n + 1)
nn <- rep(0:n, length.out = length(xx))
terms <- sign * (xx^(2 * nn + 1) / factorial(2 * nn + 1))
# return the sum of the first n terms
return(rowSums(matrix(terms, ncol = n + 1)))
}
result11 <- imitono(11, 0.5)
result11
sin(0.5)
# Define x-values
# define the range of x values
x <- seq(0, 2*pi, length.out = 100)
# calculate the y values using sin() and imitono() functions
y_sin <- sin(x)
y_imitono <- imitono(20, x)
# plot the graphs
plot(x, y_sin, type = "l", col = "blue")
lines(x, y_imitono, type = "l", col = "red")
legend("topright", legend = c("sin(x)", "imitono(20, x)"), col = c("blue", "red"), lty = 1)
# Set the range of x values
x <- seq(0, 2*pi, length.out=1000)
# Plot the sine graph using the sin() function
plot(x, sin(x), type="l", col="blue", xlab="x", ylab="y")
# Add the imitono2 function curve to the plot
lines(x, imitono2(100, x), col="red")
# Add a legend to the plot
legend("topleft", legend=c("sin(x)", "imitono2(9, x)"), col=c("blue", "red"), lty=1)
# Add the imitono2 function curve to the plot
lines(x, imitono2(11, x), col="red")
# Add a legend to the plot
legend("topleft", legend=c("sin(x)", "imitono2(11, x)"), col=c("blue", "red"), lty=1)
# Define the imitono2 function
imitono2 <- function(n, x) {
# check if n is a natural number
if(!is.numeric(n) || n < 0 || n != round(n)) {
stop("n must be a positive integer")
}
# compute series expansion using a recursive function
calc_sum <- function(i) {
if(i == 0) {
return(x)
} else {
term <- (-1)^(i) * x^(2*i+1) / factorial(2*i+1)
return(term + calc_sum(i-1))
}
}
# call calc_sum to compute the result
result <- calc_sum(n)
# return the result
return(result)
}
# Set the range of x values
x <- seq(0, 2*pi, length.out=1000)
# Plot the sine graph using the sin() function
plot(x, sin(x), type="l", col="blue", xlab="x", ylab="y")
# Add the imitono2 function curve to the plot
lines(x, imitono2(11, x), col="red")
# Add a legend to the plot
legend("topleft", legend=c("sin(x)", "imitono2(11, x)"), col=c("blue", "red"), lty=1)
result2 <- imitono2(1, 0.5)
result2
result2 <- imitono2(1, 0.5)
result2
sin(0.5)
result2 <- imitono2(11, 0.5)
result2
sin(0.5)
result2 <- imitono2(4, 0.5)
result2
sin(0.5)
# Set the range of x values
x <- seq(0, 2*pi, length.out=1000)
# Plot the sine graph using the sin() function
plot(x, sin(x), type="l", col="blue", xlab="x", ylab="y")
# Add the imitono2 function curve to the plot
lines(x, imitono2(2, x), col="red")
# Add a legend to the plot
legend("topleft", legend=c("sin(x)", "imitono2(10, x)"), col=c("blue", "red"), lty=1)
# Add the imitono2 function curve to the plot
lines(x, imitono2(5, x), col="red")
# Add the imitono2 function curve to the plot
lines(x, imitono2(6, x), col="red")
# Add the imitono2 function curve to the plot
lines(x, imitono2(7, x), col="red")
# Add the imitono2 function curve to the plot
lines(x, imitono2(8, x), col="red")
# Add the imitono2 function curve to the plot
lines(x, imitono2(9, x), col="red")
# Add the imitono2 function curve to the plot
lines(x, imitono2(10, x), col="red")
# Plot the sine graph using the sin() function
plot(x, sin(x), type="l", col="blue", xlab="x", ylab="y")
# Add the imitono2 function curve to the plot
lines(x, imitono2(10, x), col="red")
# Set the range of x values
x <- seq(0, 2*pi, length.out=10000)
# Plot the sine graph using the sin() function
plot(x, sin(x), type="l", col="blue", xlab="x", ylab="y")
# Add the imitono2 function curve to the plot
lines(x, imitono2(10, x), col="red")
x <- seq(0, 2*pi, length.out=1000)
# Plot the sine graph using the sin() function
plot(x, sin(x), type="l", col="blue", xlab="x", ylab="y")
# Add the imitono2 function curves to the plot
for(n in 1:10) {
lines(x, imitono2(n, x), col=rainbow(10)[n])
}
# Add a legend to the plot
legend("topright", legend=paste0("imitono2(", 1:10, ",x)"), col=rainbow(10), lty=1)
